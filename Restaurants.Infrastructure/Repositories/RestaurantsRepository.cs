using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using Restaurants.Domain.Entities;
using Restaurants.Domain.Repositories;
using Restaurants.Infrastructure.Persistance;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Restaurants.Infrastructure.Repositories
{
    internal class RestaurantsRepository(RestaurantsDbContext dbContext) : IRestaurantsRepository
    {
        public async Task<int> CreateRestaurant(Restaurant restaurant)
        {
            dbContext.Restaurants.Add(restaurant);
            await dbContext.SaveChangesAsync();
            return restaurant.Id; // Assuming Id is generated by the database
        }

        public async Task<IEnumerable<Restaurant>> GetAllRestaurantsAsync()
        {
            var restaurants = await dbContext.Restaurants
                .Include(r => r.Dishes)
                .Include(r => r.Address)
                .ToListAsync();
            return restaurants;
        }

        public async Task<(IEnumerable<Restaurant>,int)> GetAllMatchingRestaurantsAsync(string? searchPhrase,int pageNumber,int pageSize)
        {
            var searchPhraseToLower = searchPhrase?.ToLower();

            var baseQuery = dbContext.Restaurants
                .Include(r => r.Dishes)
                .Include(r => r.Address)
                .Where(r => searchPhraseToLower == null || r.Name.ToLower().Contains(searchPhraseToLower) || r.Description.ToLower().Contains(searchPhraseToLower));

            var totalCount = await baseQuery.CountAsync();

            var restaurants = await baseQuery
                .Skip(pageSize * (pageNumber - 1))
                .Take(pageSize)
                .ToListAsync();
             
            
            return (restaurants,totalCount);
        }

        public async Task<Restaurant?> GetRestaurantByIdAsync(int id)
        {
            var restaurant = await dbContext.Restaurants
                .Include(r => r.Dishes)
                .Include(r => r.Address)
                .FirstOrDefaultAsync(r => r.Id == id);

            return restaurant;
        }

        public async Task DeleteRestaurant(Restaurant restaurant)
        {

            dbContext.Restaurants.Remove(restaurant);
            await dbContext.SaveChangesAsync();

        }

        public async Task SaveChanges()
        {
            await dbContext.SaveChangesAsync();
        }
    }
}
